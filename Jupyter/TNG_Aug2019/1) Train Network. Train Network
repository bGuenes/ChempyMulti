{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/oliverphilcox/anaconda3/lib/python3.7/site-packages/IPython/core/magics/pylab.py:160: UserWarning: pylab import has clobbered these variables: ['colors', 'choice', 'e', 'median', 'axes']\n",
      "`%matplotlib` prevents importing * from pylab and numpy\n",
      "  \"\\n`%matplotlib` prevents importing * from pylab and numpy\"\n"
     ]
    }
   ],
   "source": [
    "%pylab inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "os.chdir('/home/oliverphilcox/ChempyMulti/')\n",
    "from Chempy.parameter import ModelParameters\n",
    "a=ModelParameters()\n",
    "from Chempy.cem_function import single_timestep_chempy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using 996709 training data points for a 7->8 shape network\n"
     ]
    }
   ],
   "source": [
    "# Define elements to use:\n",
    "\n",
    "els = ['C','Fe','He','Mg','N','Ne','O','Si'] # TNG elements\n",
    "\n",
    "# Load training data:\n",
    "full_input = '/mnt/store1/oliverphilcox/ChempyMultiData/TNG/Random_Training_Data_TNG_500000_0.npz'\n",
    "dat1=np.load(full_input,mmap_mode='r')\n",
    "full_input2 = '/mnt/store1/oliverphilcox/ChempyMultiData/TNG/Random_Training_Data_TNG_500000_1.npz'\n",
    "dat2=np.load(full_input2,mmap_mode='r')\n",
    "\n",
    "\n",
    "all_els = dat1['elements']\n",
    "for e in range(len(all_els)):\n",
    "    assert dat1['elements'][e]==dat2['elements'][e]\n",
    "    \n",
    "#params = dat1['params']#[:100000]\n",
    "params=np.concatenate([dat1['params'],dat2['params']])\n",
    "#big_abun = dat1.f.abundances#[:100000]\n",
    "big_abun=np.concatenate([dat1.f.abundances,dat2.f.abundances])\n",
    "\n",
    "el_indices=np.zeros(len(els),dtype=int)\n",
    "for e,el in enumerate(els):\n",
    "    el_indices[e]=np.where(el==all_els)[0]\n",
    "    \n",
    "# Filter out unwanted elements\n",
    "abun = big_abun[:,el_indices]\n",
    "\n",
    "\n",
    "## Remove any bad runs\n",
    "bitmap=np.ones(len(params),dtype=int)\n",
    "for i,ab in enumerate(abun):\n",
    "    if ab[0]==0:\n",
    "        bitmap[i]=0\n",
    "\n",
    "cut_params=params[np.where(bitmap==1)]\n",
    "cut_abuns=abun[np.where(bitmap==1)]\n",
    "\n",
    "good_index=np.where(np.isfinite(cut_abuns).all(axis=1))[0] # remove infinities\n",
    "cut_params2=cut_params[good_index]\n",
    "cut_abuns2=cut_abuns[good_index]\n",
    "good_index2=np.where(cut_params2[:,-1]>0.99)[0] # remove bad birth times\n",
    "cut_params3=cut_params2[good_index2]\n",
    "cut_abuns3=cut_abuns2[good_index2]\n",
    "\n",
    "# Set standardization parameters\n",
    "par_mean=np.mean(cut_params3,axis=0)\n",
    "par_std=np.std(cut_params3,axis=0)\n",
    "ab_mean=np.mean(cut_abuns3,axis=0)\n",
    "ab_std=np.std(cut_abuns3,axis=0)\n",
    "\n",
    "# Change birth-time mean/std to give t in [0,1] - we use (T-mean_T)/std_T here so this works\n",
    "par_mean[-1]=min(cut_params3[:,-1])\n",
    "par_std[-1]=(max(cut_params3[:,-1])-min(cut_params3[:,-1]))\n",
    "\n",
    "# Now randomize the selection\n",
    "len_filt=np.random.choice(range(len(cut_abuns3)),replace=False,size=len(cut_abuns3))\n",
    "\n",
    "# Create randomized and standardized training data\n",
    "trainX=(cut_params3[len_filt]-par_mean)/par_std\n",
    "trainY=(cut_abuns3[len_filt]-ab_mean)/ab_std\n",
    "\n",
    "# Add in T^2 term for accuracy\n",
    "n_poly=2\n",
    "sq_trainX=np.zeros([trainX.shape[0],trainX.shape[1]+n_poly-1])#+2])\n",
    "sq_trainX[:,:trainX.shape[1]]=trainX\n",
    "for i in range(n_poly-1):\n",
    "    sq_trainX[:,trainX.shape[1]+i]=trainX[:,-1]**(i+2)\n",
    "\n",
    "print('Using %d training data points for a %d->%d shape network'%(sq_trainX.shape[0],sq_trainX.shape[1],trainY.shape[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using 49815 test data points\n"
     ]
    }
   ],
   "source": [
    "# Load test data:\n",
    "datT=np.load('/mnt/store1/oliverphilcox/ChempyMultiData/TNG/Random_Test_Data_TNG_50000_0.npz')\n",
    "abunT=datT.f.abundances[:,el_indices]\n",
    "elsT=datT.f.elements\n",
    "paramsT=datT.f.params\n",
    "\n",
    "bitmapT=np.ones(len(paramsT),dtype=int)\n",
    "for i,ab in enumerate(abunT):\n",
    "    if ab[0]==0:\n",
    "        bitmapT[i]=0\n",
    "                \n",
    "# Remove dodgy data\n",
    "cut_paramsT=paramsT[np.where(bitmapT==1)]\n",
    "cut_abunsT=abunT[np.where(bitmapT==1)]\n",
    "good_indexT=np.where((np.isfinite(cut_abunsT).all(axis=1)))\n",
    "cut_params2T=cut_paramsT[good_indexT]\n",
    "cut_abuns2T = cut_abunsT[good_indexT]\n",
    "good_index2T=np.where(cut_params2T[:,-1]>0.99)\n",
    "cut_params3T=cut_params2T[good_index2T]\n",
    "cut_abuns3T = cut_abuns2T[good_index2T]\n",
    "                     \n",
    "# Standardize using same standardizations as before\n",
    "testX=(cut_params3T-par_mean)/par_std\n",
    "testY=(cut_abuns3T-ab_mean)/ab_std\n",
    "\n",
    "sq_testX=np.zeros([testX.shape[0],testX.shape[1]+n_poly-1])#+2])\n",
    "sq_testX[:,:testX.shape[1]]=testX\n",
    "for i in range(n_poly-1):\n",
    "    sq_testX[:,testX.shape[1]+i]=testX[:,-1]**(i+2)\n",
    "\n",
    "print(\"Using %d test data points\"%sq_testX.shape[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create the network in scikit-learn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import cross_validation\n",
    "from sklearn.neural_network import MLPRegressor\n",
    "\n",
    "def single_regressor(neurons,el_index,epochs=1000,verbose=True):\n",
    "    \"\"\"Return out-of-sample score for a given number of neurons for one element\"\"\"\n",
    "    model=MLPRegressor(solver='adam',alpha=0.001,max_iter=epochs,learning_rate='adaptive',tol=1e-13,\n",
    "                       hidden_layer_sizes=(neurons,),activation='tanh',verbose=verbose,\n",
    "                      shuffle=True,early_stopping=True)#,learning_rate_init=0.1)\n",
    "\n",
    "    model.fit(sq_trainX,trainY[:,el_index])\n",
    "\n",
    "    model_pred=model.predict(sq_testX)\n",
    "    score = np.mean((model_pred-testY[:,el_index])**2.)\n",
    "    diff = np.abs(testY[:,el_index]-model_pred)\n",
    "    w0,w1=model.coefs_\n",
    "    b0,b1=model.intercepts_\n",
    "    return score,diff,[w0,w1,b0,b1]\n",
    "\n",
    "def all_regressor(neurons,epochs=1000,verbose=True):\n",
    "    \"\"\"Return out-of-sample score for a given number of neurons for all elements\"\"\"\n",
    "    model=MLPRegressor(solver='adam',alpha=0.001,max_iter=epochs,learning_rate='adaptive',tol=1e-13,\n",
    "                       hidden_layer_sizes=(neurons,),activation='tanh',verbose=verbose,\n",
    "                      shuffle=True,early_stopping=True)#,learning_rate_init=0.1)\n",
    "\n",
    "    model.fit(sq_trainX,trainY)\n",
    "\n",
    "    model_pred=model.predict(sq_testX)\n",
    "    scores = np.mean((model_pred-testY)**2.,axis=0)\n",
    "    diffs = np.abs(testY-model_pred)\n",
    "    w0,w1=model.coefs_\n",
    "    b0,b1=model.intercepts_\n",
    "    return scores,diffs,[w0,w1,b0,b1]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Run single neuron nets for various $n_\\mathrm{neuron}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running for 5 neurons\n",
      "Running for 20 neurons\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "  0%|          | 0/16 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running for 10 neurons\n",
      "Running for 15 neurons\n",
      "Running for 55 neurons\n",
      "Running for 70 neurons\n",
      "Running for 75 neurons\n",
      "Running for 35 neurons\n",
      "Running for 45 neurons\n",
      "Running for 80 neurons\n",
      "Running for 65 neurons\n",
      "Running for 30 neurons\n",
      "Running for 25 neurons\n",
      "Running for 50 neurons\n",
      "Running for 60 neurons\n",
      "Running for 40 neurons\n",
      "Iteration 1, loss = 0.05227820\n",
      "Validation score: 0.986236\n",
      "Iteration 1, loss = 0.02400200\n",
      "Validation score: 0.993717\n",
      "Iteration 1, loss = 0.03738666\n",
      "Validation score: 0.991241\n",
      "Iteration 1, loss = 0.03486094\n",
      "Validation score: 0.992353\n",
      "Iteration 1, loss = 0.01646699\n",
      "Iteration 1, loss = 0.01630719\n",
      "Validation score: 0.995997\n",
      "Validation score: 0.995270\n",
      "Iteration 1, loss = 0.02323276\n",
      "Validation score: 0.994352\n",
      "Iteration 2, loss = 0.00594719\n",
      "Validation score: 0.989497\n",
      "Iteration 1, loss = 0.01855263\n",
      "Validation score: 0.995677\n",
      "Iteration 1, loss = 0.01676571\n",
      "Iteration 1, loss = 0.01877064\n",
      "Validation score: 0.995798\n",
      "Validation score: 0.995267\n",
      "Iteration 1, loss = 0.01417188\n",
      "Validation score: 0.996107\n",
      "Iteration 1, loss = 0.01298345\n",
      "Validation score: 0.996240\n",
      "Iteration 1, loss = 0.01224992\n",
      "Validation score: 0.995943\n",
      "Iteration 2, loss = 0.00350857\n",
      "Iteration 1, loss = 0.01110697\n",
      "Validation score: 0.993881\n",
      "Validation score: 0.995511\n",
      "Iteration 2, loss = 0.00234586\n",
      "Validation score: 0.996518\n",
      "Iteration 1, loss = 0.01374823\n",
      "Validation score: 0.995955\n",
      "Iteration 1, loss = 0.01268969\n",
      "Validation score: 0.996035\n",
      "Iteration 2, loss = 0.00303109\n",
      "Validation score: 0.995446\n",
      "Iteration 3, loss = 0.00501169\n",
      "Validation score: 0.990343\n",
      "Iteration 2, loss = 0.00170693\n",
      "Validation score: 0.997411\n",
      "Iteration 2, loss = 0.00218564\n",
      "Validation score: 0.996541\n",
      "Iteration 2, loss = 0.00189578\n",
      "Validation score: 0.997169\n",
      "Iteration 3, loss = 0.00292003\n",
      "Iteration 4, loss = 0.00463873\n",
      "Validation score: 0.994738\n",
      "Validation score: 0.991048\n",
      "Iteration 3, loss = 0.00167904\n",
      "Validation score: 0.997182\n",
      "Iteration 2, loss = 0.00189207\n",
      "Validation score: 0.997186\n",
      "Iteration 3, loss = 0.00207481\n",
      "Validation score: 0.996296\n",
      "Iteration 2, loss = 0.00187751\n",
      "Validation score: 0.997181\n",
      "Iteration 2, loss = 0.00168737\n",
      "Validation score: 0.997539\n",
      "Iteration 3, loss = 0.00132168\n",
      "Validation score: 0.997829\n",
      "Iteration 2, loss = 0.00160994\n",
      "Validation score: 0.997456\n",
      "Iteration 5, loss = 0.00434323\n",
      "Validation score: 0.991813\n",
      "Iteration 3, loss = 0.00159775\n",
      "Validation score: 0.997262\n",
      "Iteration 3, loss = 0.00139730\n",
      "Validation score: 0.997711\n",
      "Iteration 2, loss = 0.00160182\n",
      "Validation score: 0.997732\n",
      "Iteration 2, loss = 0.00172694\n",
      "Validation score: 0.997573\n",
      "Iteration 2, loss = 0.00159801\n",
      "Iteration 4, loss = 0.00261939\n",
      "Validation score: 0.995106\n",
      "Validation score: 0.997446\n",
      "Iteration 4, loss = 0.00143466\n",
      "Validation score: 0.997508\n",
      "Iteration 2, loss = 0.00166381\n",
      "Validation score: 0.997427\n",
      "Iteration 2, loss = 0.00167056\n",
      "Validation score: 0.997513\n",
      "Iteration 4, loss = 0.00181754\n",
      "Validation score: 0.996681\n",
      "Iteration 6, loss = 0.00411174\n",
      "Validation score: 0.992125\n",
      "Iteration 4, loss = 0.00112452\n",
      "Validation score: 0.998106\n",
      "Iteration 3, loss = 0.00145939\n",
      "Validation score: 0.997658\n",
      "Iteration 3, loss = 0.00130059\n",
      "Validation score: 0.997900\n",
      "Iteration 5, loss = 0.00243309\n",
      "Validation score: 0.995529\n",
      "Iteration 4, loss = 0.00136486\n",
      "Validation score: 0.997458\n",
      "Iteration 3, loss = 0.00119913\n",
      "Validation score: 0.998112\n",
      "Iteration 4, loss = 0.00122512\n",
      "Validation score: 0.997764\n",
      "Iteration 7, loss = 0.00397693\n",
      "Validation score: 0.992421\n",
      "Iteration 5, loss = 0.00128132\n",
      "Validation score: 0.997846\n",
      "Iteration 5, loss = 0.00170532\n",
      "Validation score: 0.996965\n",
      "Iteration 5, loss = 0.00098097\n",
      "Validation score: 0.998426\n",
      "Iteration 3, loss = 0.00115723\n",
      "Iteration 3, loss = 0.00123585\n",
      "Validation score: 0.998248\n",
      "Validation score: 0.997925\n",
      "Iteration 3, loss = 0.00126305\n",
      "Validation score: 0.997872\n",
      "Iteration 6, loss = 0.00222066\n",
      "Validation score: 0.996048\n",
      "Iteration 3, loss = 0.00124846\n",
      "Validation score: 0.998068\n",
      "Iteration 8, loss = 0.00381728\n",
      "Validation score: 0.993090\n",
      "Iteration 3, loss = 0.00129076\n",
      "Validation score: 0.997993\n",
      "Iteration 5, loss = 0.00125163\n",
      "Validation score: 0.997656\n",
      "Iteration 4, loss = 0.00127378\n",
      "Validation score: 0.997935\n",
      "Iteration 6, loss = 0.00120482\n",
      "Validation score: 0.997967\n",
      "Iteration 3, loss = 0.00121222\n",
      "Validation score: 0.998137\n",
      "Iteration 5, loss = 0.00109692\n",
      "Validation score: 0.998085\n",
      "Iteration 4, loss = 0.00098776\n",
      "Validation score: 0.998577\n",
      "Iteration 4, loss = 0.00102919\n",
      "Validation score: 0.998247\n",
      "Iteration 6, loss = 0.00162047\n",
      "Validation score: 0.997034\n",
      "Iteration 6, loss = 0.00088788\n",
      "Validation score: 0.998482\n",
      "Iteration 7, loss = 0.00204150\n",
      "Validation score: 0.996284\n",
      "Iteration 9, loss = 0.00343217\n",
      "Validation score: 0.993489\n",
      "Iteration 7, loss = 0.00115574\n",
      "Validation score: 0.997980\n",
      "Iteration 6, loss = 0.00118195\n",
      "Validation score: 0.997821\n",
      "Iteration 4, loss = 0.00100970\n",
      "Validation score: 0.998345\n",
      "Iteration 4, loss = 0.00097243\n",
      "Iteration 5, loss = 0.00115433\n",
      "Validation score: 0.998476\n",
      "Validation score: 0.998103\n",
      "Iteration 10, loss = 0.00331102\n",
      "Validation score: 0.993677\n",
      "Iteration 6, loss = 0.00101601\n",
      "Validation score: 0.998415\n",
      "Iteration 8, loss = 0.00196284\n",
      "Validation score: 0.996475\n",
      "Iteration 4, loss = 0.00103032\n",
      "Iteration 5, loss = 0.00088462\n",
      "Validation score: 0.998479\n",
      "Validation score: 0.998580\n",
      "Iteration 7, loss = 0.00153205\n",
      "Validation score: 0.997264\n",
      "Iteration 7, loss = 0.00082960\n",
      "Validation score: 0.998785\n",
      "Iteration 4, loss = 0.00104270\n",
      "Validation score: 0.998379\n",
      "Iteration 4, loss = 0.00105358\n",
      "Validation score: 0.997958\n",
      "Iteration 4, loss = 0.00100425\n",
      "Validation score: 0.998484\n",
      "Iteration 11, loss = 0.00325402\n",
      "Validation score: 0.993769\n",
      "Iteration 8, loss = 0.00111893\n",
      "Validation score: 0.998064\n",
      "Iteration 5, loss = 0.00091595\n",
      "Validation score: 0.998457\n",
      "Iteration 7, loss = 0.00112765\n",
      "Validation score: 0.997831\n",
      "Iteration 9, loss = 0.00191797\n",
      "Validation score: 0.996528\n",
      "Iteration 8, loss = 0.00145850\n",
      "Validation score: 0.997098\n",
      "Iteration 8, loss = 0.00079374\n",
      "Validation score: 0.998610\n",
      "Iteration 7, loss = 0.00096030\n",
      "Validation score: 0.998489\n",
      "Iteration 5, loss = 0.00089966\n",
      "Iteration 6, loss = 0.00107069\n",
      "Validation score: 0.998432\n",
      "Validation score: 0.998250\n",
      "Iteration 12, loss = 0.00320923\n",
      "Validation score: 0.993661\n",
      "Iteration 6, loss = 0.00081657\n",
      "Validation score: 0.998587\n",
      "Iteration 5, loss = 0.00088291\n",
      "Validation score: 0.998755\n",
      "Iteration 9, loss = 0.00109101\n",
      "Validation score: 0.997859\n",
      "Iteration 10, loss = 0.00188036\n",
      "Validation score: 0.996446\n",
      "Iteration 5, loss = 0.00088915\n",
      "Validation score: 0.998511\n",
      "Iteration 9, loss = 0.00133937\n",
      "Validation score: 0.997686\n",
      "Iteration 8, loss = 0.00108535\n",
      "Validation score: 0.997897\n",
      "Iteration 5, loss = 0.00093965\n",
      "Iteration 5, loss = 0.00092972\n",
      "Validation score: 0.998492\n",
      "Validation score: 0.998274\n",
      "Iteration 5, loss = 0.00090697\n",
      "Iteration 9, loss = 0.00076915\n",
      "Validation score: 0.998458\n",
      "Validation score: 0.998808\n",
      "Iteration 13, loss = 0.00317640\n",
      "Validation score: 0.993847\n",
      "Iteration 6, loss = 0.00086052\n",
      "Validation score: 0.998628\n",
      "Iteration 8, loss = 0.00092277\n",
      "Validation score: 0.998560\n",
      "Iteration 10, loss = 0.00106996\n",
      "Validation score: 0.998051\n",
      "Iteration 11, loss = 0.00185004\n",
      "Validation score: 0.996635\n",
      "Iteration 10, loss = 0.00122306\n",
      "Validation score: 0.997842\n",
      "Iteration 7, loss = 0.00101152\n",
      "Validation score: 0.998359\n",
      "Iteration 14, loss = 0.00314653\n",
      "Validation score: 0.993915\n",
      "Iteration 6, loss = 0.00083880\n",
      "Validation score: 0.998662\n",
      "Iteration 7, loss = 0.00076974\n",
      "Iteration 9, loss = 0.00105053\n",
      "Validation score: 0.997899\n",
      "Validation score: 0.998801\n",
      "Iteration 10, loss = 0.00074731\n",
      "Validation score: 0.998839\n",
      "Iteration 6, loss = 0.00082778\n",
      "Validation score: 0.998871\n",
      "Iteration 12, loss = 0.00182159\n",
      "Validation score: 0.996673\n",
      "Iteration 11, loss = 0.00105573\n",
      "Validation score: 0.998178\n",
      "Iteration 6, loss = 0.00081717\n",
      "Iteration 11, loss = 0.00118326\n",
      "Validation score: 0.997938\n",
      "Iteration 15, loss = 0.00312202\n",
      "Validation score: 0.998708\n",
      "Validation score: 0.993973\n",
      "Iteration 6, loss = 0.00086355\n",
      "Iteration 6, loss = 0.00087799\n",
      "Validation score: 0.998617\n",
      "Validation score: 0.998714\n",
      "Iteration 9, loss = 0.00089599\n",
      "Validation score: 0.998543\n",
      "Iteration 7, loss = 0.00082265\n",
      "Validation score: 0.998564\n",
      "Iteration 6, loss = 0.00085277\n",
      "Validation score: 0.998561\n",
      "Iteration 11, loss = 0.00073138\n",
      "Validation score: 0.998939\n",
      "Iteration 13, loss = 0.00179850\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation score: 0.996607\n",
      "Iteration 10, loss = 0.00101397\n",
      "Validation score: 0.998159\n",
      "Iteration 8, loss = 0.00096223\n",
      "Validation score: 0.998295\n",
      "Iteration 16, loss = 0.00309827\n",
      "Validation score: 0.993971\n",
      "Iteration 12, loss = 0.00104081\n",
      "Validation score: 0.998312\n",
      "Iteration 12, loss = 0.00116366\n",
      "Validation score: 0.997964\n",
      "Iteration 7, loss = 0.00079482\n",
      "Validation score: 0.998685\n",
      "Iteration 8, loss = 0.00073414\n",
      "Validation score: 0.998953\n",
      "Iteration 10, loss = 0.00087443\n",
      "Iteration 7, loss = 0.00078375\n",
      "Validation score: 0.998613\n",
      "Validation score: 0.998792\n",
      "Iteration 14, loss = 0.00178081\n",
      "Validation score: 0.996783\n",
      "Iteration 12, loss = 0.00071708\n",
      "Validation score: 0.999013\n",
      "Iteration 7, loss = 0.00084495\n",
      "Iteration 17, loss = 0.00308092\n",
      "Validation score: 0.994046\n",
      "Validation score: 0.998793\n",
      "Iteration 7, loss = 0.00081168\n",
      "Validation score: 0.998802\n",
      "Iteration 11, loss = 0.00097844\n",
      "Validation score: 0.998294\n",
      "Iteration 8, loss = 0.00079653\n",
      "Validation score: 0.998636\n",
      "Iteration 13, loss = 0.00103173\n",
      "Validation score: 0.998283\n",
      "Iteration 13, loss = 0.00115187\n",
      "Validation score: 0.997972\n",
      "Iteration 7, loss = 0.00078006\n",
      "Validation score: 0.998878\n",
      "Iteration 9, loss = 0.00092474\n",
      "Validation score: 0.998537\n",
      "Iteration 7, loss = 0.00081380\n",
      "Iteration 15, loss = 0.00176607\n",
      "Validation score: 0.998381\n",
      "Validation score: 0.996831\n",
      "Iteration 18, loss = 0.00306283\n",
      "Validation score: 0.994137\n",
      "Iteration 13, loss = 0.00070656\n",
      "Validation score: 0.998989\n",
      "Iteration 9, loss = 0.00070921\n",
      "Validation score: 0.999034\n",
      "Iteration 8, loss = 0.00076266\n",
      "Validation score: 0.998838\n",
      "Iteration 11, loss = 0.00086076\n",
      "Validation score: 0.998450\n",
      "Iteration 14, loss = 0.00114092\n",
      "Validation score: 0.998046\n",
      "Iteration 14, loss = 0.00102374\n",
      "Validation score: 0.998270\n",
      "Iteration 8, loss = 0.00081908\n",
      "Validation score: 0.998723\n",
      "Iteration 12, loss = 0.00094404\n",
      "Validation score: 0.998293\n",
      "Iteration 8, loss = 0.00075217\n",
      "Validation score: 0.998766\n",
      "Iteration 19, loss = 0.00304820\n",
      "Validation score: 0.994045\n",
      "Iteration 8, loss = 0.00077066\n",
      "Validation score: 0.998544\n",
      "Iteration 9, loss = 0.00077590\n",
      "Iteration 16, loss = 0.00175493\n",
      "Validation score: 0.996734\n",
      "Validation score: 0.998656\n",
      "Iteration 14, loss = 0.00069906\n",
      "Validation score: 0.998947\n",
      "Iteration 15, loss = 0.00113291\n",
      "Validation score: 0.998070\n",
      "Iteration 10, loss = 0.00088207\n",
      "Validation score: 0.998392\n",
      "Iteration 8, loss = 0.00075106\n",
      "Validation score: 0.998791\n",
      "Iteration 15, loss = 0.00101698\n",
      "Validation score: 0.998301\n",
      "Validation score did not improve more than tol=0.000000 for two consecutive epochs. Stopping.\n",
      "Iteration 20, loss = 0.00303649\n",
      "Validation score: 0.994078\n",
      "Iteration 12, loss = 0.00084538\n",
      "Validation score: 0.998697\n",
      "Iteration 9, loss = 0.00079898\n",
      "Validation score: 0.998791\n",
      "Iteration 13, loss = 0.00091120\n",
      "Validation score: 0.998356\n",
      "Iteration 9, loss = 0.00073818\n",
      "Validation score: 0.998798\n",
      "Iteration 17, loss = 0.00174538\n",
      "Validation score: 0.996782\n",
      "Iteration 8, loss = 0.00078130\n",
      "Iteration 10, loss = 0.00069291\n",
      "Validation score: 0.998965\n",
      "Validation score: 0.998856\n",
      "Iteration 15, loss = 0.00068776\n",
      "Validation score: 0.999018\n",
      "Iteration 16, loss = 0.00112726\n",
      "Iteration 9, loss = 0.00074116\n",
      "Validation score: 0.998062\n",
      "Validation score: 0.998876\n",
      "Iteration 21, loss = 0.00302412\n",
      "Validation score: 0.994183\n",
      "Iteration 9, loss = 0.00072512\n",
      "Validation score: 0.999051\n",
      "Iteration 10, loss = 0.00075972\n",
      "Validation score: 0.998747\n",
      "Iteration 13, loss = 0.00082812\n",
      "Validation score: 0.998693\n",
      "Iteration 11, loss = 0.00084392\n",
      "Validation score: 0.998692\n",
      "Iteration 18, loss = 0.00173867\n",
      "Validation score: 0.996888\n",
      "Iteration 22, loss = 0.00301352\n",
      "Validation score: 0.994131\n",
      "Iteration 16, loss = 0.00067870\n",
      "Validation score: 0.998986\n",
      "Iteration 14, loss = 0.00088607\n",
      "Iteration 17, loss = 0.00112264\n",
      "Validation score: 0.997970\n",
      "Validation score: 0.998403\n",
      "Iteration 10, loss = 0.00078075\n",
      "Validation score: 0.998568\n",
      "Validation score did not improve more than tol=0.000000 for two consecutive epochs. Stopping.\n",
      "Iteration 9, loss = 0.00072802\n",
      "Validation score: 0.998976\n",
      "Iteration 10, loss = 0.00071890\n",
      "Validation score: 0.998828\n",
      "Iteration 11, loss = 0.00067975\n",
      "Validation score: 0.999158\n",
      "Iteration 23, loss = 0.00300691\n",
      "Validation score: 0.994205\n",
      "Iteration 9, loss = 0.00075347\n",
      "Validation score: 0.998843\n",
      "Iteration 19, loss = 0.00173321\n",
      "Validation score: 0.996907\n",
      "Iteration 10, loss = 0.00072179\n",
      "Validation score: 0.998923\n",
      "Iteration 18, loss = 0.00111952\n",
      "Validation score: 0.998102\n",
      "Iteration 17, loss = 0.00067143\n",
      "Validation score: 0.998853\n",
      "Iteration 14, loss = 0.00081274\n",
      "Validation score: 0.998717\n",
      "Iteration 11, loss = 0.00074619\n",
      "Validation score: 0.998709\n",
      "Iteration 10, loss = 0.00070950\n",
      "Validation score: 0.999068\n",
      "Iteration 15, loss = 0.00087099\n",
      "Validation score: 0.998448\n",
      "Iteration 12, loss = 0.00081323\n",
      "Validation score: 0.998719\n",
      "Iteration 24, loss = 0.00300213\n",
      "Validation score: 0.994085\n",
      "Iteration 19, loss = 0.00111500\n",
      "Validation score: 0.998045\n",
      "Iteration 20, loss = 0.00172896\n",
      "Validation score: 0.996800\n",
      "Iteration 18, loss = 0.00066562\n",
      "Validation score: 0.998899\n",
      "Validation score did not improve more than tol=0.000000 for two consecutive epochs. Stopping.\n",
      "Iteration 10, loss = 0.00070876\n",
      "Validation score: 0.999046\n",
      "Iteration 25, loss = 0.00299478\n",
      "Validation score: 0.994132\n",
      "Iteration 16, loss = 0.00086056\n",
      "Iteration 15, loss = 0.00080183\n",
      "Validation score: 0.998493\n",
      "Validation score: 0.998775\n",
      "Iteration 11, loss = 0.00069996\n",
      "Validation score: 0.998788\n",
      "Validation score did not improve more than tol=0.000000 for two consecutive epochs. Stopping.\n",
      "Iteration 12, loss = 0.00066806\n",
      "Validation score: 0.998941\n",
      "Iteration 12, loss = 0.00073304\n",
      "Validation score: 0.998694\n",
      "Iteration 10, loss = 0.00072875\n",
      "Iteration 11, loss = 0.00069480\n",
      "Validation score: 0.999051\n",
      "Validation score: 0.998989\n",
      "Iteration 20, loss = 0.00111271\n",
      "Validation score: 0.998066\n",
      "Iteration 21, loss = 0.00172364\n",
      "Validation score: 0.996738\n",
      "Iteration 11, loss = 0.00070242\n",
      "Validation score: 0.998984\n",
      "Iteration 13, loss = 0.00079304\n",
      "Validation score: 0.998824\n",
      "Iteration 26, loss = 0.00299051\n",
      "Validation score: 0.994249\n",
      "Iteration 17, loss = 0.00085049\n",
      "Validation score: 0.998518\n",
      "Iteration 11, loss = 0.00068918\n",
      "Validation score: 0.999013\n",
      "Iteration 27, loss = 0.00298631\n",
      "Validation score: 0.994235\n",
      "Iteration 16, loss = 0.00079063\n",
      "Validation score: 0.998741\n",
      "Iteration 21, loss = 0.00110750\n",
      "Validation score: 0.997970\n",
      "Validation score did not improve more than tol=0.000000 for two consecutive epochs. Stopping.\n",
      "Iteration 22, loss = 0.00172014\n",
      "Validation score: 0.996906\n",
      "Validation score did not improve more than tol=0.000000 for two consecutive epochs. Stopping.\n",
      "Iteration 13, loss = 0.00072649\n",
      "Validation score: 0.998842\n",
      "Iteration 12, loss = 0.00068491\n",
      "Validation score: 0.998956\n",
      "Iteration 28, loss = 0.00298331\n",
      "Iteration 11, loss = 0.00070493\n",
      "Validation score: 0.994106\n",
      "Iteration 14, loss = 0.00077900\n",
      "Validation score: 0.999011\n",
      "Validation score: 0.998787\n",
      "Iteration 18, loss = 0.00084135\n",
      "Validation score: 0.998502\n",
      "Iteration 12, loss = 0.00068697\n",
      "Validation score: 0.999017\n",
      "Iteration 13, loss = 0.00066059\n",
      "Validation score: 0.999128\n",
      "Iteration 17, loss = 0.00078282\n",
      "Validation score: 0.998818\n",
      "Iteration 29, loss = 0.00297781\n",
      "Validation score: 0.994210\n",
      "Validation score did not improve more than tol=0.000000 for two consecutive epochs. Stopping.\n",
      "Iteration 12, loss = 0.00067281\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "  6%|▋         | 1/16 [06:18<1:34:42, 378.81s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation score: 0.999007\n",
      "Iteration 14, loss = 0.00071599\n",
      "Validation score: 0.998811\n",
      "Iteration 19, loss = 0.00083518\n",
      "Validation score: 0.998540\n",
      "Iteration 13, loss = 0.00067621\n",
      "Validation score: 0.999044\n",
      "Validation score did not improve more than tol=0.000000 for two consecutive epochs. Stopping.\n",
      "Iteration 15, loss = 0.00076537\n",
      "Validation score: 0.998767\n",
      "Iteration 12, loss = 0.00068327\n",
      "Validation score: 0.999089\n",
      "Iteration 18, loss = 0.00077414\n",
      "Validation score: 0.998775\n",
      "Iteration 13, loss = 0.00067612\n",
      "Iteration 14, loss = 0.00065488\n",
      "Validation score: 0.999042\n",
      "Validation score: 0.999164\n",
      "Iteration 13, loss = 0.00066314\n",
      "Validation score: 0.998876\n",
      "Validation score did not improve more than tol=0.000000 for two consecutive epochs. Stopping.\n",
      "Iteration 20, loss = 0.00083030\n",
      "Validation score: 0.998548\n",
      "Iteration 15, loss = 0.00071247\n",
      "Validation score: 0.998901\n",
      "Iteration 16, loss = 0.00075315\n",
      "Validation score: 0.998917\n",
      "Iteration 19, loss = 0.00076832\n",
      "Validation score: 0.998728\n",
      "Iteration 13, loss = 0.00066402\n",
      "Validation score: 0.999130\n",
      "Iteration 21, loss = 0.00082611\n",
      "Validation score: 0.998555\n",
      "Iteration 15, loss = 0.00064750\n",
      "Iteration 14, loss = 0.00066702\n",
      "Validation score: 0.999072\n",
      "Validation score: 0.999182\n",
      "Iteration 16, loss = 0.00070768\n",
      "Validation score: 0.998786\n",
      "Iteration 20, loss = 0.00076411\n",
      "Validation score: 0.998858\n",
      "Iteration 17, loss = 0.00074326\n",
      "Validation score: 0.998901\n",
      "Iteration 22, loss = 0.00082003\n",
      "Validation score: 0.998524\n",
      "Iteration 14, loss = 0.00065126\n",
      "Validation score: 0.998825\n",
      "Iteration 17, loss = 0.00070015\n",
      "Iteration 21, loss = 0.00075777\n",
      "Validation score: 0.998866\n",
      "Validation score: 0.998884\n",
      "Iteration 15, loss = 0.00065445\n",
      "Validation score: 0.999051\n",
      "Iteration 16, loss = 0.00064244\n",
      "Validation score: 0.999143\n",
      "Iteration 18, loss = 0.00073393\n",
      "Validation score: 0.998878\n",
      "Iteration 23, loss = 0.00081846\n",
      "Validation score: 0.998532\n",
      "Iteration 22, loss = 0.00075433\n",
      "Validation score: 0.998788\n",
      "Iteration 18, loss = 0.00069767\n",
      "Validation score: 0.998928\n",
      "Iteration 15, loss = 0.00063909\n",
      "Validation score: 0.999154\n",
      "Iteration 16, loss = 0.00064615\n",
      "Validation score: 0.999056\n",
      "Iteration 24, loss = 0.00081449\n",
      "Validation score: 0.998609\n",
      "Iteration 19, loss = 0.00072275\n",
      "Validation score: 0.998959\n",
      "Iteration 17, loss = 0.00063489\n",
      "Validation score: 0.999140\n",
      "Iteration 19, loss = 0.00069497\n",
      "Validation score: 0.998924\n",
      "Iteration 23, loss = 0.00074803\n",
      "Validation score: 0.998827\n",
      "Iteration 25, loss = 0.00081052\n",
      "Validation score: 0.998601\n",
      "Iteration 17, loss = 0.00063757\n",
      "Validation score: 0.999058\n",
      "Validation score did not improve more than tol=0.000000 for two consecutive epochs. Stopping.\n",
      "Iteration 20, loss = 0.00071324\n",
      "Validation score: 0.998808\n",
      "Iteration 16, loss = 0.00063133\n",
      "Validation score: 0.999184\n",
      "Iteration 20, loss = 0.00069111\n",
      "Validation score: 0.998849\n",
      "Iteration 26, loss = 0.00080700\n",
      "Validation score: 0.998623\n",
      "Iteration 24, loss = 0.00074586\n",
      "Validation score: 0.998697\n",
      "Validation score did not improve more than tol=0.000000 for two consecutive epochs. Stopping.\n",
      "Iteration 18, loss = 0.00062838\n",
      "Validation score: 0.999214\n",
      "Iteration 21, loss = 0.00068794\n",
      "Validation score: 0.998758\n",
      "Validation score did not improve more than tol=0.000000 for two consecutive epochs. Stopping.\n",
      "Iteration 27, loss = 0.00080425\n",
      "Validation score: 0.998530\n",
      "Iteration 21, loss = 0.00070449\n",
      "Validation score: 0.998890\n",
      "Iteration 17, loss = 0.00062357\n",
      "Validation score: 0.999199\n",
      "Iteration 28, loss = 0.00080207\n",
      "Validation score: 0.998638\n",
      "Iteration 22, loss = 0.00069876\n",
      "Validation score: 0.998983\n",
      "Iteration 29, loss = 0.00079977\n",
      "Validation score: 0.998650\n",
      "Iteration 18, loss = 0.00061662\n",
      "Validation score: 0.999131\n",
      "Iteration 19, loss = 0.00062330\n",
      "Validation score: 0.999178\n",
      "Iteration 30, loss = 0.00079698\n",
      "Validation score: 0.998630\n",
      "Iteration 23, loss = 0.00069281\n",
      "Validation score: 0.998898\n",
      "Iteration 19, loss = 0.00060972\n",
      "Validation score: 0.998672\n",
      "Iteration 31, loss = 0.00079583\n",
      "Iteration 20, loss = 0.00061906\n",
      "Validation score: 0.998544\n",
      "Validation score: 0.999160\n",
      "Iteration 24, loss = 0.00068959\n",
      "Validation score: 0.999054\n",
      "Iteration 32, loss = 0.00079279\n",
      "Validation score: 0.998628\n",
      "Validation score did not improve more than tol=0.000000 for two consecutive epochs. Stopping.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 31%|███▏      | 5/16 [07:51<49:53, 272.11s/it]  "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration 21, loss = 0.00061845\n",
      "Validation score: 0.999153\n",
      "Validation score did not improve more than tol=0.000000 for two consecutive epochs. Stopping.\n",
      "Iteration 20, loss = 0.00060561\n",
      "Validation score: 0.999161\n",
      "Validation score did not improve more than tol=0.000000 for two consecutive epochs. Stopping.\n",
      "Iteration 25, loss = 0.00068345\n",
      "Validation score: 0.999009\n",
      "Iteration 26, loss = 0.00068002\n",
      "Validation score: 0.999032\n",
      "Iteration 27, loss = 0.00067692\n",
      "Validation score: 0.999065\n",
      "Iteration 28, loss = 0.00067469\n",
      "Validation score: 0.998978\n",
      "Iteration 29, loss = 0.00067014\n",
      "Validation score: 0.999060\n",
      "Iteration 30, loss = 0.00066874\n",
      "Validation score: 0.999006\n",
      "Validation score did not improve more than tol=0.000000 for two consecutive epochs. Stopping.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 16/16 [08:06<00:00, 30.41s/it]\n",
      "Process ForkPoolWorker-121:\n",
      "Process ForkPoolWorker-123:\n",
      "Process ForkPoolWorker-125:\n",
      "Process ForkPoolWorker-130:\n",
      "Process ForkPoolWorker-154:\n",
      "Process ForkPoolWorker-124:\n",
      "Process ForkPoolWorker-129:\n",
      "Process ForkPoolWorker-128:\n",
      "Process ForkPoolWorker-132:\n",
      "Process ForkPoolWorker-134:\n",
      "Process ForkPoolWorker-143:\n",
      "Process ForkPoolWorker-131:\n",
      "Process ForkPoolWorker-141:\n",
      "Process ForkPoolWorker-150:\n",
      "Process ForkPoolWorker-142:\n",
      "Process ForkPoolWorker-140:\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "KeyboardInterrupt\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "Process ForkPoolWorker-135:\n",
      "Process ForkPoolWorker-151:\n",
      "Process ForkPoolWorker-145:\n",
      "Process ForkPoolWorker-136:\n",
      "Process ForkPoolWorker-127:\n",
      "Process ForkPoolWorker-138:\n",
      "Process ForkPoolWorker-144:\n",
      "Process ForkPoolWorker-137:\n",
      "Process ForkPoolWorker-122:\n",
      "Process ForkPoolWorker-155:\n",
      "Process ForkPoolWorker-126:\n",
      "Process ForkPoolWorker-147:\n",
      "Process ForkPoolWorker-139:\n",
      "Process ForkPoolWorker-158:\n",
      "Process ForkPoolWorker-152:\n",
      "Process ForkPoolWorker-157:\n",
      "Process ForkPoolWorker-133:\n",
      "Process ForkPoolWorker-146:\n",
      "Process ForkPoolWorker-160:\n",
      "Process ForkPoolWorker-149:\n",
      "Process ForkPoolWorker-156:\n",
      "Process ForkPoolWorker-148:\n",
      "Process ForkPoolWorker-159:\n",
      "Process ForkPoolWorker-153:\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 352, in get\n",
      "    res = self._reader.recv_bytes()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/connection.py\", line 216, in recv_bytes\n",
      "    buf = self._recv_bytes(maxlength)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "KeyboardInterrupt\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/connection.py\", line 407, in _recv_bytes\n",
      "    buf = self._recv(4)\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/connection.py\", line 379, in _recv\n",
      "    chunk = read(handle, remaining)\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "KeyboardInterrupt\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "KeyboardInterrupt\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n"
     ]
    }
   ],
   "source": [
    "def neural_run(nn):\n",
    "    print(\"Running for %d neurons\"%nn)\n",
    "    return single_regressor(nn,0)[0]\n",
    "import multiprocessing as mp\n",
    "import tqdm\n",
    "p=mp.Pool()\n",
    "all_neurons = np.arange(5,85,5)\n",
    "neuron_scores=list(tqdm.tqdm(p.imap(neural_run,all_neurons),total=len(all_neurons)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.savez('8element_net_variable_neurons_L2_scores',neurons=all_neurons,scores=neuron_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "d=np.load('8element_net_variable_neurons_L2_scores.npz')\n",
    "all_neurons=d['neurons']\n",
    "neuron_scores=d['scores']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0004, 0.1)"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(all_neurons,neuron_scores);plt.ylabel('L2 Score',fontsize=14);\n",
    "plt.xlabel(r'$n_\\mathrm{neuron}$',fontsize=14);\n",
    "plt.yscale('log')\n",
    "plt.ylim([4e-4,1e-1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Now train networks in parallel using $n_\\mathrm{neuron}=40$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [],
   "source": [
    "neurons=40\n",
    "def mp_run(el_i):\n",
    "    print(\"Running net %d of %d\"%(int(el_i)+1,len(els)))\n",
    "    output = single_regressor(neurons,int(el_i),epochs=3000)\n",
    "    return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "  0%|          | 0/8 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running net 3 of 8\n",
      "Running net 5 of 8\n",
      "Running net 7 of 8\n",
      "Running net 8 of 8\n",
      "Running net 4 of 8\n",
      "Running net 6 of 8\n",
      "Running net 2 of 8\n",
      "Running net 1 of 8\n",
      "Iteration 1, loss = 0.00805700\n",
      "Validation score: 0.997596\n",
      "Iteration 1, loss = 0.01009534\n",
      "Validation score: 0.997435\n",
      "Iteration 1, loss = 0.01866198\n",
      "Validation score: 0.992615\n",
      "Iteration 1, loss = 0.01083849\n",
      "Iteration 1, loss = 0.00783369\n",
      "Validation score: 0.995623\n",
      "Validation score: 0.998120\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Process ForkPoolWorker-239:\n",
      "/home/oliverphilcox/anaconda3/lib/python3.7/site-packages/sklearn/neural_network/multilayer_perceptron.py:566: UserWarning: Training interrupted by user.\n",
      "  warnings.warn(\"Training interrupted by user.\")\n",
      "Process ForkPoolWorker-219:\n",
      "Process ForkPoolWorker-225:\n",
      "Process ForkPoolWorker-223:\n",
      "Process ForkPoolWorker-230:\n",
      "Process ForkPoolWorker-216:\n",
      "Process ForkPoolWorker-236:\n",
      "/home/oliverphilcox/anaconda3/lib/python3.7/site-packages/sklearn/neural_network/multilayer_perceptron.py:566: UserWarning: Training interrupted by user.\n",
      "  warnings.warn(\"Training interrupted by user.\")\n",
      "Process ForkPoolWorker-231:\n",
      "Process ForkPoolWorker-211:\n",
      "/home/oliverphilcox/anaconda3/lib/python3.7/site-packages/sklearn/neural_network/multilayer_perceptron.py:566: UserWarning: Training interrupted by user.\n",
      "  warnings.warn(\"Training interrupted by user.\")\n",
      "Process ForkPoolWorker-221:\n",
      "/home/oliverphilcox/anaconda3/lib/python3.7/site-packages/sklearn/neural_network/multilayer_perceptron.py:566: UserWarning: Training interrupted by user.\n",
      "  warnings.warn(\"Training interrupted by user.\")\n",
      "/home/oliverphilcox/anaconda3/lib/python3.7/site-packages/sklearn/neural_network/multilayer_perceptron.py:566: UserWarning: Training interrupted by user.\n",
      "  warnings.warn(\"Training interrupted by user.\")\n",
      "Process ForkPoolWorker-228:\n",
      "Process ForkPoolWorker-234:\n",
      "Process ForkPoolWorker-233:\n",
      "Process ForkPoolWorker-232:\n",
      "Process ForkPoolWorker-218:\n",
      "Process ForkPoolWorker-227:\n",
      "Process ForkPoolWorker-209:\n",
      "Process ForkPoolWorker-210:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "Traceback (most recent call last):\n",
      "Process ForkPoolWorker-224:\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m~/anaconda3/lib/python3.7/multiprocessing/pool.py\u001b[0m in \u001b[0;36mnext\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    732\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 733\u001b[0;31m                 \u001b[0mitem\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_items\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpopleft\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    734\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mIndexError\u001b[0m: pop from an empty deque",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-140-40760f55e989>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPool\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0moutput\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtqdm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmp_run\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtotal\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/tqdm/_tqdm.py\u001b[0m in \u001b[0;36m__iter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    935\u001b[0m \"\"\", fp_write=getattr(self.fp, 'write', sys.stderr.write))\n\u001b[1;32m    936\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 937\u001b[0;31m             \u001b[0;32mfor\u001b[0m \u001b[0mobj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    938\u001b[0m                 \u001b[0;32myield\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    939\u001b[0m                 \u001b[0;31m# Update and possibly print the progressbar.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/multiprocessing/pool.py\u001b[0m in \u001b[0;36mnext\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    735\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_index\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_length\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    736\u001b[0m                     \u001b[0;32mraise\u001b[0m \u001b[0mStopIteration\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 737\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_cond\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    738\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    739\u001b[0m                     \u001b[0mitem\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_items\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpopleft\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    294\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m    \u001b[0;31m# restore state no matter what (e.g., KeyboardInterrupt)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    295\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 296\u001b[0;31m                 \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    297\u001b[0m                 \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    298\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 352, in get\n",
      "    res = self._reader.recv_bytes()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "KeyboardInterrupt\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "KeyboardInterrupt\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/connection.py\", line 216, in recv_bytes\n",
      "    buf = self._recv_bytes(maxlength)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/connection.py\", line 407, in _recv_bytes\n",
      "    buf = self._recv(4)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/connection.py\", line 379, in _recv\n",
      "    chunk = read(handle, remaining)\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "/home/oliverphilcox/anaconda3/lib/python3.7/site-packages/sklearn/neural_network/multilayer_perceptron.py:566: UserWarning: Training interrupted by user.\n",
      "  warnings.warn(\"Training interrupted by user.\")\n",
      "Process ForkPoolWorker-237:\n",
      "/home/oliverphilcox/anaconda3/lib/python3.7/site-packages/sklearn/neural_network/multilayer_perceptron.py:566: UserWarning: Training interrupted by user.\n",
      "  warnings.warn(\"Training interrupted by user.\")\n",
      "Process ForkPoolWorker-240:\n",
      "Process ForkPoolWorker-229:\n",
      "Process ForkPoolWorker-222:\n",
      "Process ForkPoolWorker-214:\n",
      "Process ForkPoolWorker-235:\n",
      "Process ForkPoolWorker-212:\n",
      "/home/oliverphilcox/anaconda3/lib/python3.7/site-packages/sklearn/neural_network/multilayer_perceptron.py:566: UserWarning: Training interrupted by user.\n",
      "  warnings.warn(\"Training interrupted by user.\")\n",
      "Process ForkPoolWorker-215:\n",
      "Process ForkPoolWorker-217:\n",
      "Process ForkPoolWorker-220:\n",
      "Process ForkPoolWorker-226:\n",
      "Process ForkPoolWorker-213:\n",
      "Process ForkPoolWorker-238:\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "KeyboardInterrupt\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "KeyboardInterrupt\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n",
      "KeyboardInterrupt\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "KeyboardInterrupt\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 110, in worker\n",
      "    task = get()\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/queues.py\", line 351, in get\n",
      "    with self._rlock:\n",
      "  File \"/home/oliverphilcox/anaconda3/lib/python3.7/multiprocessing/synchronize.py\", line 96, in __enter__\n",
      "    return self._semlock.__enter__()\n"
     ]
    }
   ],
   "source": [
    "import multiprocessing as mp\n",
    "p=mp.Pool()\n",
    "import tqdm\n",
    "output=list(tqdm.tqdm(p.imap(mp_run,range(len(els))),total=len(els)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_scores = np.zeros(len(els))\n",
    "all_diffs = np.zeros([len(els),len(testY)])\n",
    "coeffs=[]\n",
    "for el_i in range(len(els)):\n",
    "    all_scores[el_i],all_diffs[el_i],co=output[el_i]\n",
    "    coeffs.append(co)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "w0=np.hstack([co[0] for co in coeffs])\n",
    "b0=np.hstack([co[2] for co in coeffs])\n",
    "b1=np.hstack([co[3] for co in coeffs])\n",
    "\n",
    "## Read in w1 vector into sparse structure\n",
    "w1=np.zeros([w0.shape[1],b1.shape[0]])\n",
    "assert neurons==w0.shape[1]/len(coeffs)\n",
    "for i in range(len(coeffs)):\n",
    "    w1[int(neurons*i):int(neurons*(i+1)),i]=coeffs[i][1][:,0]\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def stacked_net_output(in_par):\n",
    "    l1=np.matmul(in_par,w0)+b0\n",
    "    return np.matmul(np.tanh(l1),w1)+b1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save output\n",
    "np.savez('/mnt/store1/oliverphilcox/ChempyMultiData/TNG/stacked_8_element_net.npz',w0=w0,w1=w1,b0=b0,b1=b1,\n",
    "         in_mean=par_mean,in_std=par_std,out_mean=ab_mean,out_std=ab_std,\n",
    "         activation='tanh',neurons=neurons)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reload data\n",
    "dat=np.load('/mnt/store1/oliverphilcox/ChempyMultiData/TNG/stacked_8_element_net.npz')\n",
    "w0=dat['w0'];w1=dat['w1'];b0=dat['b0'];b1=dat['b1']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "l1_err = np.abs(stacked_net_output(sq_testX)-testY)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.hist(l1_err[:,2],range=[0,.4],bins=100);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Run for all networks together:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration 1, loss = 0.02359062\n",
      "Validation score: 0.992125\n",
      "Iteration 2, loss = 0.00342566\n",
      "Validation score: 0.994858\n",
      "Iteration 3, loss = 0.00260909\n",
      "Validation score: 0.995898\n",
      "Iteration 4, loss = 0.00233656\n",
      "Validation score: 0.996184\n",
      "Iteration 5, loss = 0.00218798\n",
      "Validation score: 0.996296\n",
      "Iteration 6, loss = 0.00207736\n",
      "Validation score: 0.996744\n",
      "Iteration 7, loss = 0.00199354\n",
      "Validation score: 0.996915\n",
      "Iteration 8, loss = 0.00192521\n",
      "Validation score: 0.996898\n",
      "Iteration 9, loss = 0.00186803\n",
      "Validation score: 0.997164\n",
      "Iteration 10, loss = 0.00182524\n",
      "Validation score: 0.997232\n",
      "Iteration 11, loss = 0.00179884\n",
      "Validation score: 0.997289\n",
      "Iteration 12, loss = 0.00177520\n",
      "Validation score: 0.997360\n",
      "Iteration 13, loss = 0.00175889\n",
      "Validation score: 0.997451\n",
      "Iteration 14, loss = 0.00174370\n",
      "Validation score: 0.997474\n",
      "Iteration 15, loss = 0.00173108\n",
      "Validation score: 0.997496\n",
      "Iteration 16, loss = 0.00171975\n",
      "Validation score: 0.997526\n",
      "Iteration 17, loss = 0.00170975\n",
      "Validation score: 0.997635\n",
      "Iteration 18, loss = 0.00169929\n",
      "Validation score: 0.997598\n",
      "Iteration 19, loss = 0.00169029\n",
      "Validation score: 0.997678\n",
      "Iteration 20, loss = 0.00168153\n",
      "Validation score: 0.997562\n",
      "Iteration 21, loss = 0.00167335\n",
      "Validation score: 0.997694\n",
      "Iteration 22, loss = 0.00166796\n",
      "Validation score: 0.997755\n",
      "Iteration 23, loss = 0.00166122\n",
      "Validation score: 0.997682\n",
      "Iteration 24, loss = 0.00165579\n",
      "Validation score: 0.997791\n",
      "Iteration 25, loss = 0.00165232\n",
      "Validation score: 0.997747\n",
      "Iteration 26, loss = 0.00164991\n",
      "Validation score: 0.997792\n",
      "Iteration 27, loss = 0.00164528\n",
      "Validation score: 0.997800\n",
      "Iteration 28, loss = 0.00164153\n",
      "Validation score: 0.997861\n",
      "Iteration 29, loss = 0.00163894\n",
      "Validation score: 0.997851\n",
      "Iteration 30, loss = 0.00163705\n",
      "Validation score: 0.997866\n",
      "Iteration 31, loss = 0.00163401\n",
      "Validation score: 0.997773\n",
      "Iteration 32, loss = 0.00163249\n",
      "Validation score: 0.997859\n",
      "Iteration 33, loss = 0.00162936\n",
      "Validation score: 0.997827\n",
      "Validation score did not improve more than tol=0.000000 for two consecutive epochs. Stopping.\n"
     ]
    }
   ],
   "source": [
    "comb_scores,comb_diffs,_ = all_regressor(40,epochs=3000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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BkU9KSQoykkeCr9DB5KncOWtI6kp0BJ4P6Pt6cBXJL1JcijrLEkPA2uAI9I+qtuWme2HenVoybhHFrD+o21AEhLjHllArw4ta93n6tWradOmDc2bNwegTZs2HHPMMdx5552sWrWKQYMGMWjQIAC+9a1vUVxcTPfu3bnhhht29jFv3jxOO+00evfuTf/+/dm4ceOntvHkk09y6qmnsmbNGioqKvjqV79Kv3796NevHy+88AIAa9eu5ZxzzqFv375ceeWVZD0Q7vvf/z633HLLLuV///vfufzyy+nXrx99+/blN7/5DVu3buX6669n2rRp9OnTh2nTpvH888/Tp08f+vTpQ99Bw9m4aVOt//4KVeMT7tIP7b8Ag0ke9j4PGBURi3PqXAX0jIhvShoJ/ENEfE1Sd+ARkvMSxwC/A7pGxPactgOB70fEBenyo8BjETFV0r3Aooi4J2uMxcXF4Xs9mdW/pUuXctJJJwHwH79dzJJVGzLrr/9oG8v+tpFmTcTHAccfdSgtD6n+2v6iYw7nhi93r3b9pk2bOOOMM/jwww85++yzGTFiBAMGDAA+uQdcmzZtAHj//fc58sgj2b59O4MHD+bOO++kW7dudOvWjWnTptGvXz82bNjAZz7zGR5++GFKS0sZPHgwt912GyUlJbRq1YpRo0bx7W9/mzPOOIO33nqLc889l6VLl3L11VfTpk0brr/+ep588kkuuOACKioqdm57h06dOjF37lwGDhzIb3/7WxYuXMgTTzzBpEmT+MEPfkBRURH/9E//xAcffED//v1ZsGABjz76KKWlpdx1110AfPnLX2b8+PGcfvrpbHpzIS1aNKfp507arX+rHSTNj4jimtrW+DuKiKiUNA54GmgCPBARiyXdBJRGRAnJQ+MfklRGsicxMm27WNJ0YAlQCVyVGxLVuBaYKulmYEHat5kdAFoe0oxmTcTW7UH7I1pkhkQhDj30UObPn88f/vAHZs+ezYgRI/jRj36U97j/9OnTue+++6isrGT16tUsWbIESbRr145+/foBcPjhh++sP3v2bEpLS3nmmWd2ls+aNYslS5bsrLNhwwY2btzInDlzePzxxwE4//zzadWqVbVjbtKkCddccw233norw4YN21n+zDPPUFJSwk9+8hMgufT4rbfe2qX96aefzne/+13+8R//kX8Y2JcOh352N/7GaqegH9xFxExgZpWy63PebwYuqabtBGBCRt/PAc/lLK8gvTLKzPYfWd/8d3hx+Rq+fv/LtD+iBR9t+5jvnN2V07q0qbFdliZNmjBw4EAGDhxIz549mTx58i5BsXLlSn7yk58wb948WrVqxZgxY9i8eTMRUe2lo8cddxwrVqzgL3/5C8XFyZfujz/+mJdeeolDDjlkl/q7cwnqZZddxq233kr37p/8nUUEjz32GCeeeOKn6u44Ob/D+PHjOf/885k5cyanDL2EWY9NolubrgVvuzZ8ryczqxc7zkkcf9ShdGj1Ge4a1ZdxjyzY5QT37li2bBlvvPHJVT8LFy7k2GOPBeCwww7beb5hw4YNfPazn6Vly5a8++67PPXUUwB069aNVatWMW/ePAA2btxIZWVy0eWxxx7L448/zte//vWdJ5/POeecnYeAdmwP4Mwzz2TKlCkAPPXUU6xbty5z3M2aNePf/u3fuOOOO3aWnXvuufzsZz/beX5jwYIFu8wDYPny5fTs2ZNrr72W4j49eP2NFbv1d1YbDgozqxeLytdz16i+Ow83ndalDXeN6sui8vW17nPTpk2MHj2aoqIievXqxZIlS7jxxhsBuOKKKxg2bBiDBg2id+/e9O3bl+7du3P55Zdz+umnA3DwwQczbdo0/uVf/oXevXszZMiQT/2C+cQTT2TKlClccsklLF++nDvvvJPS0lJ69epFUVER9957LwA33HADc+bM4eSTT+aZZ57h85//fI1jHzt27M5QAvjhD3/Itm3b6NWrFz169OCHP/whAIMGDWLJkiU7T2bfcccd9OjRg969e3NIixYMGzyg1n9/harxZPb+wCezzRpGvhOkNdnxY7tpV55aF0NqXHb8hqKAQ091ejLbzGxvckDsf3zoyczMMjkozMwsk4PCzMwyOSjMzCyTg8LM6teD5ycv2284KMxsv/a3v/2NkSNH0qVLF4qKijjvvPP4y1/+ssf9jhkzhhkzZuxSXlpaytVXX73H/UP1tzOfNGkSBx10EIsWLdpZ1qNHD958883M/urqjrkOCjOrH3+8A1bO+XTZyjlJeS1FBBdddBEDBw5k+fLlLFmyhFtuuYV33313DwdbveLiYu68884663+HDh06MGFCtXc/ystBYWb7t/Ynw6NjYPMHyfLKOcly+5Nr3eXs2bNp1qwZ3/zmN3eW9enThy996UtEBNdccw09evSgZ8+eTJs2DYDnnnuOAQMG8LWvfY0TTjiB8ePHM2XKFPr370/Pnj1ZvvyT52PMmjWLL33pS5xwwgk88cQTO9tfcMEFANx4441cfvnlDBw4kOOOO+5TAfLwww/Tv39/+vTpw5VXXsn27cn9UB988EFOOOEEBgwYsPM25flccMEFLF68mGXLlu2y7plnnuHUU0/l5LMu5JLLr2bTpk15b62+t/gHd2a2dzw1Hv725+w6h7WDdxdDk2bw0EXQths8NzF55fO5njDsR9V299prr/GFL3wh77rHH3+chQsX8uqrr7JmzRr69evHmWeeCcCrr77K0qVLOfLIIznuuOP453/+Z15++WV++tOf8rOf/WznPZjefPNNnn/+eZYvX86gQYMoKyvbZTuvv/46s2fPZuPGjZx44ol861vfoqysjGnTpvHCCy/QrFkzvv3tbzNlyhSGDBnCDTfcwPz582nZsiWDBg2ib9++ecd/0EEH8e///u/ccsstTJ48eWf5mjVruPnmm5k1axaf/WgVE++8j9tuu43rr7+e2267jdmzZ+9ye/M95aAws/rT4ogkJLZvhZYdk+U68sc//pFLL72UJk2acPTRRzNgwADmzZvH4YcfTr9+/WjXrh0AXbp04ZxzzgGgZ8+ezJ49e2cfX/va1zjooIPo2rUrxx13HK+//vou2zn//PNp3rw5zZs356ijjuLdd9/ld7/7HfPnz995+/KPPvqIo446auezKHY8lXPEiBGZ51NGjRrFhAkTWLly5c6yP/3pTyxZsiS5X1XlFrZu28apZ9Tt/Z4cFGa2d2R8899p5ZxkT6JlR9j2IQy8FjqfWetNdu/ePe8JZyDzKXM7nogHyTf3HcsHHXTQp27UV/XW4fluJZ7bV5MmTaisrCQiGD16NLfeeuun6v7617/erduRN23alO9973tMnPjJHldEMGTIEH75y1/u1r2e9oTPUZhZ/dhxTqJtNzjiWLhkUrJc9QT3bjjrrLPYsmULP//5z3eWzZs3j+eff54zzzyTadOmsX37dioqKpgzZw79++/eo24effRRPv74Y5YvX86KFSt2eVZEdQYPHsyMGTN47733gOTpen/961/54he/yHPPPcfatWvZtm0bjz76aI19jRkzhlmzZlFRUQHAKaecwgsvvLDzMNiHH360c6+k6i3J9xYHhZnVj3de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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.errorbar(1,np.mean(all_scores),yerr=np.std(all_scores),marker='x',label='Stacked Nets')\n",
    "plt.errorbar(2,np.mean(comb_scores),yerr=np.std(comb_scores),marker='x',label='Combined Net')\n",
    "plt.legend();plt.title('MSE Scores');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(all_diffs.ravel(),range=[0,np.percentile(all_diffs.ravel(),99)],alpha=0.5,bins=50,label='Stacked Single Nets');\n",
    "plt.hist(comb_diffs.ravel(),range=[0,np.percentile(all_diffs.ravel(),99)],alpha=0.5,bins=50,label='Combined Nets');\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Compute L1 differences for combined and stacked nets (with correct normalizations)\n",
    "real_all_diffs = np.asarray([ad*ab_std for ad in all_diffs.T])\n",
    "real_comb_diffs = np.asarray([cd*ab_std for cd in comb_diffs])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.savez('/mnt/store1/oliverphilcox/ChempyMultiData/TNG/Training_plot_data.npz',\n",
    "        real_all_diffs=real_all_diffs,\n",
    "        real_comb_diffs=real_comb_diffs,\n",
    "        els=els)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAgkAAAGCCAYAAABq/VB+AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvIxREBQAAIABJREFUeJzs3Xmc1vP6x/HX1TSVTItq2pdppSnaplCWsiQ/HXEqIkQRhxzrcSLRgk4dyhpCqSyJQ6cTJ04kyyFTKSRRKVpQiiPt9fn98bnvmXume5a77pnvLO/n43E/5r6/233dLfO97s9yfcw5h4iIiEh2ZYIOQERERIomJQkiIiISlZIEERERiUpJgoiIiESlJEFERESiUpIgIiIiUSlJEBERkaiUJIiIiEhUShJEREQkKiUJIiIiElXZoAMoCmrUqOFSUlKCDkNERKRQLF68eItzLjmv45QkACkpKSxatCjoMERERAqFma3Lz3HqbhAREZGolCSIiIhIVEoSREREJColCSIiIhKVkgQRERGJSrMbREQCdODAAbZs2cIvv/zC/v37gw5HSoCEhASqVq1KjRo1KFPm8NoClCSIiARo/fr1mBkpKSkkJiZiZkGHJMWYc469e/fy448/sn79eho2bHhY11N3g4hIgH7//Xfq1atHuXLllCDIYTMzypUrR7169fj9998P+3pKEkREAna4TcIi2cXr35T+ZYqIlBBdu/qHSLwoSRARkWJl7dq1mFlGOf3sr/NjxIgRtG7duqBCLDGUJIiISMwuv/xyzAwzIzExkSZNmnDrrbfGpR+8qAj3769ZsybL9ssvv5yePXvGfK1XXnklnuEVCiUJEj9q6xQpVc444ww2bdrEmjVruOeee5g4cSK33nrrIV9vz549cYwuPhISEhg2bFjQYQRGSYKIiByS8uXLU7t2bRo0aMDFF19M//79mTVrFgD79+9n0KBBNG7cmCOOOILmzZszbtw4Dhw4kHF++Bv52LFjqV+/PvXr1wfgueeeo2PHjlSqVImaNWvSt29fNmzYEFNsX375Jeecc07GNS666CJ++OGHmD/j9ddfz8yZM1m8eHGux02ZMoXU1FQqVKhAixYtmDBhQsZnTUlJAaBv374Z010Bvv/+e3r16kW1atWoWLEixxxzDDNmzIg5xoKkJEFEROLiiCOOYO/evYAvElWvXj1mzpzJihUruPfee7nvvvuYMmVKlnMWLFjAZ599xty5c3n77bcB36IwcuRIli1bxpw5c9iyZQsXXXRRvuPYtGkTp5xyCq1bt+aTTz5h3rx5bN++nXPPPTdLkpIfnTp1onfv3tx22205HvPUU09xxx13MGrUKFasWMEDDzzA2LFjmThxIgDp6ekZx23atCnj9bXXXsuOHTuYP38+y5cv58EHH6Rq1aoxxVfQVExJRKSIufFGWLo09vPC5xxKr1/btvDgg7GfF/bJJ5/wwgsvcPrppwOQmJjIqFGjMvanpKSwZMkSXnzxRQYNGpSxvUKFCkyePJny5ctnbBs4cGDG8yZNmvD444/TsmVL1q9fn9HakJvHH3+cNm3aMHbs2Ixt06ZNo1q1aixatIhOnTrF9Nnuu+8+UlNTmTt3Lj169Dho/+jRoxk3bhx9+vQBoHHjxgwdOpSJEycyZMgQkpOTAahatSq1a9fOOG/dunX07t2bNm3aZJxX1ChJEBGRQzJ37lySkpLYt28fe/fupVevXjzyyCMZ+5944gmefvpp1q1bx86dO9m7dy+NGjXKco3WrVtnSRAAlixZwsiRI1m6dClbt27FOQfAd999l68kYfHixbz33nskJSUdtG/16tUxJwnNmjXjqquuYujQoXTv3j3Lvs2bN/P9999z9dVX86c//Slj+759+zLizskNN9zANddcw9y5czn99NM5//zz6dChQ0yxFTQlCSIiRcyhfqMPtyC8+268IsndKaecwqRJk0hMTKRu3bokJiZm7HvppZe48cYbuf/+++ncuTOVK1fmscce47XXXstyjSOPPDLL699//52zzjqLM844g+nTp1OzZk22bNnCySefnO+BjQcOHOCcc87h/vvvP2hfrVq1DuGTwt13303Tpk15/vnnD3ov8AlR586dY7rmoEGDOOuss3jjjTeYN28enTt35vbbb2fEiBGHFGNBUJIgIiKHpGLFijRr1izqvg8++IDjjz+eIUOGZGxbvXp1ntf86quv2LJlC/fdd19G8/urr74aU1zt27dn5syZNGrUKEvicjhq1qzJrbfeyvDhwznxxBMztteqVYt69eqxevVqLrvsshzPT0xMjLqAV/369Rk8eDCDBw9m7NixPPTQQ0UqSdDARRERibsWLVqwZMkS/v3vf/PNN98wevRoFixYkOd5DRs2pHz58jz66KOsWbOG119/neHDh8f03tdddx2//vorF154IQsXLmTNmjXMmzePwYMH89tvvx3qR+KWW25h165dGTM4wkaMGMG4ceOYMGECK1eu5IsvvmDatGmMGTMm45iUlBTefvttfvjhB7Zt2wb47oa5c+eyZs0ali5dyty5c0lNTT3k+AqCkgQREYm7q6++mgsuuICLL76Yjh07snbtWm655ZY8z0tOTmbq1KnMmjWL1NRURo4cyfjx42N677p16/Lhhx9SpkwZevToQatWrbjuuusoX778QeMfYpGUlMTdd9/Nrl27smy/8sormTx5MtOnT6dNmzacfPLJTJo0KctAxAceeID58+fToEED2rVrB/iuiuuvv57U1FTOPPNMatWqxdSpUw85voJgeQ2sKA3S0tJcLOU8JQeF3SEqUgKsWLGCli1bxuVa+i8okXL7t2Vmi51zaXldQy0JIiIiEpUGLoqIlBBqQZB4U0uCiIiIRKUkQURERKIKNEkwsx5mttLMVpnZ0Cj7y5vZS6H9C80sJbS9k5ktDT2Wmdn5+b2miIiI5E9gSYKZJQCPAWcDqcBFZpZ9guggYJtzrhkwAQgX4v4CSHPOtQV6AE+aWdl8XlNERETyIciWhE7AKufcGufcHmAG0CvbMb2A8KTRV4DTzcycczucc/tC2ysA4Xmc+bmmiIiI5EOQSUI94PuI1+tD26IeE0oKfgWqA5jZ8Wa2HPgcuCa0Pz/XFBERkXwIMkmwKNuyV3bK8Rjn3ELnXCugI3C7mVXI5zX9hc0Gm9kiM1u0efPmGMIWESmiunY9tHWiRXIQZJKwHmgQ8bo+sDGnY8ysLFAF2Bp5gHNuBfA70Dqf1wyfN8k5l+acSwuv9S0iIsVDSkpK1FUeYz0mHu6//35SUlIK/H2CEGSSkA40N7PGZlYO6AfMznbMbGBA6Hkf4B3nnAudUxbAzBoBRwNr83lNERGJgx9//JEbbriBpk2bUr58eerVq8fZZ5/NG2+8EXRoAKSnp3PttdcGHQYAZka5cuVYs2ZNlu2XX345PXv2jPlar7zySjzDy1FgFRedc/vMbAjwJpAATHbOLTezUcAi59xs4Blgupmtwrcg9AudfhIw1Mz2AgeAa51zWwCiXbNQP5iISCmwdu1aunTpQqVKlRgzZgxt2rThwIEDvP3221xzzTV89913QYdIUWslTkhIYNiwYbz44otBh5JvgdZJcM694Zxr4Zxr6py7N7TtrlCCgHNul3Our3OumXOuk3NuTWj7dOdcK+dcW+dce+fcrNyuKSIi8XXttdfinGPRokVccMEFHH300bRs2ZIhQ4awbNmyjOO+++47zj//fCpVqkSlSpX44x//yPr16zP2jxgxgtatWzN16lRSUlJISkriiiuuYM+ePUycOJEGDRpQvXp1br75Zg4cOJAlhu3bt3PJJZeQlJRE7dq1D+payN7dYGZMmjSJvn37cuSRR9KkSROee+65LOds2LCBfv36cdRRR3HUUUdxzjnn8M0332Q5Zty4cdSuXZukpCQuu+wytm/fnq8/s+uvv56ZM2eyePHiXI+bMmUKqampVKhQgRYtWjBhwoSMzx7u1ujbty9mVuDdHKq4KCIiMdm6dStz585lyJAhJCUlHbT/qKOOAsA5x3nnncePP/7IO++8w/z589m4cSPnnXcekSsQr127ln/+85/MmTOHf/zjH7z88sv06tWL9PR03nrrLZ5++mkeeeQRXnvttSzvM378eFq2bMmSJUsYOXIkd9xxB6+++mqusY8aNYpevXqxbNkyLrzwQgYOHMi6desA2LFjB926daNChQosWLCAjz76iDp16nDGGWewY8cOAGbOnMmdd97JyJEjWbJkCUcffXS+l7Lu1KkTvXv35rbbbsvxmKeeeoo77riDUaNGsWLFCh544AHGjh3LxIkTAd+FEj5u06ZNGa8LihZ4EhEpam68EZYujf288DmHMsOhbVt48MF8Hbpq1Sqcc3kucT1v3jyWLVvG6tWrM77xvvDCCzRr1oy3336bM844A4D9+/czZcoUqlSpQuvWrenRowcLFixgw4YNlCtXjpYtW9KlSxfmz59P7969M65//PHHM2zYMABatGhBeno648eP549//GOOMV166aVccsklAIwePZqHHnqI999/n0aNGjFjxgycc0yZMgUzP1nuySefpGbNmsyZM4cLLriABx98kAEDBnD11VcDMGzYMObPn8+qVavy9Wd33333kZqayty5c+nRo8dB+0ePHs24cePo06cPAI0bN2bo0KFMnDiRIUOGZHShVK1aldq1a+frPQ+HWhJERCQmka0AuVmxYgV169bN0iTepEkT6taty5dffpmxrWHDhlSpUiXjda1atWjRogXlypXL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\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def percs(data,axis=0):\n",
    "    percs=np.percentile(data,[15.865,50.,100.-15.865],axis=axis)\n",
    "    return percs[1],percs[1]-percs[0],percs[2]-percs[1]\n",
    "all_percs=percs(real_all_diffs)\n",
    "comb_percs=percs(real_comb_diffs)\n",
    "\n",
    "\n",
    "plt.figure(figsize=(8,6))\n",
    "plt.errorbar(np.arange(len(els))-0.05,all_percs[0],\n",
    "             yerr=[all_percs[1],all_percs[2]],label='Parallel Nets',c='b');\n",
    "plt.errorbar(np.arange(len(els))+0.05,comb_percs[0],\n",
    "             yerr=[comb_percs[1],comb_percs[2]],label='Combined Net',c='r');FS=18\n",
    "plt.legend(fontsize=14);plt.ylabel('L1 Distance [dex]',fontsize=FS);plt.xlabel('Abundance',fontsize=FS)\n",
    "\n",
    "names = []\n",
    "for el in els:\n",
    "    if el!='Fe':\n",
    "        names.append('[%s/Fe]'%el)\n",
    "    else:\n",
    "        names.append('[Fe/H]')\n",
    "\n",
    "plt.xticks(range(8),names,fontsize=13);\n",
    "plt.savefig('Plots_New/L1_Element_Error.pdf',bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "p1,p2,p3=np.percentile(real_all_diffs,[15.865,50.,100-17.865])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "$0.005_{-0.004}^{+0.007}$\n"
     ]
    }
   ],
   "source": [
    "print(r'$%.3f_{-%.3f}^{+%.3f}$'%(p2,p2-p1,p3-p2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Single Stacked Nets 0.008 0.013\n"
     ]
    }
   ],
   "source": [
    "print(\"Single Stacked Nets\",np.mean(real_all_diffs).round(3),np.std(real_all_diffs).round(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Combined Nets 0.012 0.017\n"
     ]
    }
   ],
   "source": [
    "print(\"Combined Nets\",np.mean(real_comb_diffs).round(3),np.std(real_comb_diffs).round(3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### So the single nets seem to perform better here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Now access the convergence across parameter space:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Using mean L1 error here:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_par = cut_params3\n",
    "test_par=cut_params3T\n",
    "stacked_pred =stacked_net_output(sq_testX)\n",
    "stacked_diff = np.mean(np.abs((stacked_pred-testY)*ab_std),axis=1) # destandardize here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1057.68x576 with 37 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_tr = train_par\n",
    "data_v = test_par\n",
    "param_error = stacked_diff\n",
    "\n",
    "# Initialize plot\n",
    "plt.clf()\n",
    "text_size = 12\n",
    "\n",
    "#plt.rc('text', usetex=False)\n",
    "#plt.rc('font', family='sans-serif')\n",
    "\n",
    "#plt.rc('font', family='serif',size = text_size)\n",
    "#plt.rc('xtick', labelsize=text_size)\n",
    "#plt.rc('ytick', labelsize=text_size)\n",
    "#plt.rc('axes', labelsize=text_size, lw=1.0)\n",
    "#plt.rc('lines', linewidth = 1)\n",
    "#plt.rcParams['ytick.major.pad']='8'\n",
    "#plt.rcParams['text.latex.preamble']=[r\"\\usepackage{libertine}\"]\n",
    "#params = {'text.usetex' : True,\n",
    "#      'font.family' : 'libertine',\n",
    "#      'text.latex.unicode': True,\n",
    "#      }\n",
    "#plt.rcParams.update(params)\n",
    "parameter_names = [r'$\\alpha_\\mathrm{IMF}$',r'$\\log_{10}(\\mathrm{N_{Ia}})$',\n",
    "               r'$\\log_{10}(\\mathrm{SFE})$',\n",
    "               r'$\\log_{10}(\\mathrm{SFR_{peak}})$',r'$\\mathrm{x}_\\mathrm{out}$',r'$T_\\mathrm{star}$']\n",
    "\n",
    "\n",
    "# Plot settings\n",
    "fig,axes = plt.subplots(nrows = 6, ncols = 6,figsize=(14.69,8.0))#,dpi=300)\n",
    "alpha = 0.5\n",
    "lw=2 # Linewidth\n",
    "left = 0.1 # Left side of subplots\n",
    "right = 0.8 # Right side\n",
    "bottom = 0.075\n",
    "top = 0.97\n",
    "wspace = 0.0 # blankspace width between subplots\n",
    "hspace = 0.0 # blankspace height between subplots\n",
    "color_max = np.percentile(param_error,99.)#0.05#a.color_max\n",
    "plt.subplots_adjust(left=left,bottom=bottom,right=right,top=top,wspace=wspace,hspace=hspace)\n",
    "\n",
    "cmap= cm.YlGnBu\n",
    "\n",
    "# Create plot\n",
    "for i in range(6):\n",
    "    for j in range(6):\n",
    "        axes[i,j].locator_params(nbins=4)\n",
    "        if j==1:\n",
    "            axes[i,j].locator_params(nbins=4)\n",
    "        if i==j:\n",
    "            counts,edges = np.histogram(np.asarray(data_v[:,j]),bins=10)\n",
    "            max_count = float(np.max(counts))\n",
    "            counts = np.divide(counts,max_count)\n",
    "            median = np.zeros(len(edges)-1)\n",
    "            for k in range(len(edges)-1):\n",
    "                choice = np.logical_and(np.greater(data_v[:,j],edges[k]),np.less(data_v[:,j],edges[k+1]))\n",
    "                error=np.extract(choice,param_error)\n",
    "                if len(error) != 0:\n",
    "                    median[k] = np.median(error)\n",
    "            colors = cmap(median/color_max)\n",
    "            axes[i,j].bar(x = edges[:-1], height=counts, width = edges[1]-edges[0],\n",
    "                                color=colors,alpha=alpha, linewidth=0,rasterized=True)\n",
    "            axes[i,j].set_xlim(min(data_v[:,j]),max(data_v[:,j]))\n",
    "            axes[i,j].set_ylim(0,1.05)\n",
    "            if j !=0:\n",
    "                plt.setp(axes[i,j].get_yticklabels(), visible=False)\n",
    "            axes[i,j].vlines(np.percentile(data_v[:,j],15.865),axes[i,j].get_ylim()[0],axes[i,j].get_ylim()[1], color = 'k',alpha=alpha,linewidth = lw,linestyle = 'dashed')\n",
    "            axes[i,j].vlines(np.percentile(data_v[:,j],100-15.865),axes[i,j].get_ylim()[0],axes[i,j].get_ylim()[1], color = 'k',alpha=alpha,linewidth = lw,linestyle = 'dashed')\n",
    "            axes[i,j].vlines(np.percentile(data_v[:,j],50),axes[i,j].get_ylim()[0],axes[i,j].get_ylim()[1], color = 'k',alpha=alpha,linewidth = lw)\n",
    "        if i>j:\n",
    "            if j !=0:\n",
    "                plt.setp(axes[i,j].get_yticklabels(), visible=False)\n",
    "            P1 = axes[i,j].scatter(data_v[:,j],data_v[:,i],marker='x',alpha=0.3,\n",
    "                                    c=param_error,vmin=0,vmax=color_max,cmap=cmap,s=3,rasterized=True)\n",
    "            #P2 = axes[i,j].scatter(data_tr[:,j],data_tr[:,i],c='k',marker='+',s=80)\n",
    "            axes[i,j].set_xlim(min(data_tr[:,j]),max(data_tr[:,j]))\n",
    "            axes[i,j].set_ylim(min(data_tr[:,i]),max(data_tr[:,i]))\n",
    "        if j>i:\n",
    "            axes[i,j].axis('off')\n",
    "        if i == 5:\n",
    "            axes[i,j].set_xlabel(parameter_names[j])\n",
    "        if j ==0:\n",
    "            axes[i,j].set_ylabel(parameter_names[i])\n",
    "        if i==2 and j == 1:\n",
    "            cplot = axes[i,j].scatter(data_v[:,j],data_v[:,i],marker='.',alpha=0.3,\n",
    "                                                c=param_error,vmin=0,vmax=color_max,\n",
    "                                                cmap=cmap,s=3,rasterized=True)\n",
    "            axes[i,j].set_xlim(min(data_tr[:,j]),max(data_tr[:,j]))\n",
    "            axes[i,j].set_ylim(min(data_tr[:,i]),max(data_tr[:,i]))\n",
    "cax=fig.add_axes([0.82,0.06,0.02,0.9]);\n",
    "plt.colorbar(cplot,cax=cax);\n",
    "\n",
    "#plt.savefig('Plots/Network_Error_Param_Space.pdf',bbox_inches='tight')\n",
    "\n",
    "plt.show();\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig.savefig('Plots_New/Network_Error_Param_Space.png',dpi=300)#,bbox_inches='tight')#,dpi=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
